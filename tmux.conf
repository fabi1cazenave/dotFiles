#|
#| File    : ~/.tmux.conf
#| Author  : Fabien Cazenave
#| Source  : https://github.com/fabi1cazenave/dotFiles
#| Licence : WTFPL
#|
#| Apply with:
#|   tmux source-file ~/.tmux.conf
#|

# main prefix: Alt-Space
set-option -g prefix M-Space

# reload config
bind M-R source-file ~/.tmux.conf

# make ctrl-arrow work
set-window-option -g xterm-keys on

# remove Esc-Wait off so Vim works faster
set-option -sg escape-time 0

# start numbering at 1
set -g base-index 1

#set-option -g default-command ranger
#set-option -g default-shell bash
set-option -g default-shell /usr/bin/zsh

# WM window title string (uses statusbar variables)
set -g set-titles on
set -g set-titles-string "tmux:#I [ #W ]"

# make mouse useful in copy mode
set -g mouse on

#|    copy-mode bindings                                                    <<<
#|=============================================================================

# enter copy mode
unbind [
bind M-Space copy-mode
#bind Escape copy-mode

# use Vim motion keys while in copy mode (what else?)
setw -g mode-keys vi

# use this to list all copy-mode bindings:
#   tmux list-keys -t emacs-copy
#   tmux list-keys -t vim-copy

# more natural copy/paste
bind-key   -T copy-mode-vi      y  send-keys -X  copy-selection
bind                            p  send-keys -X  paste-buffer
bind                          M-p  send-keys -X  paste-buffer
# bind                          C-v  send-keys -X  paste-buffer

# bind-key C-c run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"
bind M-c run "tmux show-buffer | xclip -selection clipboard -i"
bind M-v run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer"

# toggle selection with V rather than Space
bind-key   -T copy-mode-vi      v  send-keys -X  begin-selection
bind-key   -T copy-mode-vi    M-v  send-keys -X  rectangle-toggle
bind-key   -T copy-mode-vi      V  send-keys -X  rectangle-toggle

# the following sections are not Vim-standard but they match my ~/.vimrc

# scroll down/up with CTRL+j/k
bind-key   -T copy-mode-vi    C-k  send-keys -X  scroll-up
bind-key   -T copy-mode-vi    C-j  send-keys -X  scroll-down

# page down/up with Space/BackSpace
bind-key   -T copy-mode-vi BSpace  send-keys -X  page-up
bind-key   -T copy-mode-vi  Space  send-keys -X  page-down

# swap ,/; to be more consistent with n/N on my layout (qwerty-lafayette)
unbind-key -T copy-mode-vi     ,
unbind-key -T copy-mode-vi     \;
bind-key   -T copy-mode-vi      ,  send-keys -X  jump-again
bind-key   -T copy-mode-vi     \;  send-keys -X  jump-reverse
# >>>

#|    suckless.vim bindings                                                 <<<
#|=============================================================================

# select panes
bind   h select-pane -L
bind M-h select-pane -L
bind   j select-pane -D
bind M-j select-pane -D
bind   k select-pane -U
bind M-k select-pane -U
bind   l select-pane -R
bind M-l select-pane -R

# move panes (FIXME)
#bind   H swap-pane -L
#bind M-H swap-pane -L
bind   J swap-pane -D
bind M-J swap-pane -D
bind   K swap-pane -U
bind M-K swap-pane -U
#bind   L swap-pane -R
#bind M-L swap-pane -R

# resize panes
bind   C-h resize-pane -L 5
bind M-C-h resize-pane -L 5
bind   C-j resize-pane -D 2
bind M-C-j resize-pane -D 2
bind   C-k resize-pane -U 2
bind M-C-k resize-pane -U 2
bind   C-l resize-pane -R 5
bind M-C-l resize-pane -R 5

# new|prev|next window
bind   y new-window
bind M-y new-window
bind   Y new-window \; split-window -h \; select-pane -L
bind M-Y new-window \; split-window -h \; select-pane -L
bind   u previous-window
bind M-u previous-window
bind   i next-window
bind M-i next-window

# move windows
bind   U swap-window -t -1
bind M-U swap-window -t -1
bind   I swap-window -t +1
bind M-I swap-window -t +1

# vertical|horizontal splits
bind   o split-window -v
bind M-o split-window -v
bind   O split-window -h
bind M-O split-window -h
# >>>

#|    other key bindings                                                    <<<
#|=============================================================================

bind   . command-prompt
bind M-. command-prompt

# toggle status bar (hidden by default)
set-option -g status off
bind-key   s set-option status
bind-key M-s set-option status

# go back to the last pane/window
#bind-key M-Space last-pane
#bind-key M-Space last-window
# >>>

#|    color theme                                                           <<<
#|=============================================================================

# statusbar
set -g status-bg black
#set -g status-fg white
set -g status-fg colour246
set -g status-left-length 60
set -g status-right-length 10
set -g status-left ' #[default]'
set -g status-right '%H:%M #[default]'

# statusbar content
setw -g window-status-format '#[bg=colour234,fg=colour243] #I: #W #[default]'
#setw -g window-status-current-format '#[bg=colour24,fg=colour248] #I: #[fg=white]#W #[default]'
setw -g window-status-current-format '#[bg=colour239,fg=colour248] #I: #[fg=white]#W #[default]'

# pane border
set -g pane-border-fg        colour240
set -g pane-active-border-fg colour240
# >>>

# vim: set ft=config fdm=marker fmr=<<<,>>> fdl=0:
